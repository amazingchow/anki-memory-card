version: "3.7"
services:

  # The cache service.
  cache:
    image: redis:6.2-rc-alpine3.12
    container_name: infra-redis
    ports:
      - 6379:6379
    restart: always
    # 1. We've enabled snapshot (also called RDB), and closed AOF function. 
    #    Redis will save a snapshot of the DB every 3600 seconds if at least 1 write operation was performed.
    # 2. The --maxmemory option will control the maximum memory that Redis can use, here we set it to 32GB.
    #    The --maxmemory-policy option will control the behavior when the memory is full, here we set it to noeviction,
    #    which means that Redis will return an error when the memory is full.
    command: "redis-server --requirepass sOmE_sEcUrE_pAsS --appendonly no --save 3600 1 --maxmemory 34359738368 --maxmemory-policy noeviction"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /usr/share/zoneinfo:/usr/share/zoneinfo
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 30

  # # The SSRF Proxy server.
  # ssrf_proxy:
  #   image: ubuntu/squid:ubuntu/squid:4.10-20.04_beta
  #   container_name: infra-ssrf-proxy
  #   restart: always
  #   environment:
  #     TZ: Asia/Shanghai
  #   volumes:
  #     - /usr/share/zoneinfo:/usr/share/zoneinfo
  #     - ./infra/ssrf_proxy-conf.d/squid.conf:/etc/squid/squid.conf
  #   networks:
  #     - ssrf_proxy_network
  #     - default

  # # The nginx reverse proxy, used for reverse proxying the Web service.
  # nginx:
  #   image: nginx:1.27.0
  #   container_name: infra-nginx
  #   ports:
  #     - 80:80
  #     - 443:443
  #   restart: always
  #   environment:
  #     TZ: Asia/Shanghai
  #   volumes:
  #     - /usr/share/zoneinfo:/usr/share/zoneinfo
  #     - ./infra/nginx-conf.d/nginx.conf:/etc/nginx/nginx.conf
  #     - ./infra/nginx-conf.d/conf.d:/etc/nginx/conf.d
  #     - ./nginx/ssl:/etc/ssl
  #   depends_on:
  #     - api
  #     - web

volumes:
  redis-data:
    driver: local

# networks:
#   # create a network between api and ssrf_proxy, and can not access outside.
#   ssrf_proxy_network:
#     driver: bridge
#     internal: true
